AWSTemplateFormatVersion: "2010-09-09"
Description: "Soccer Platform Infrastructure - 30 Days DevOps Challenge"

# --- Parameters Section ---
# This section defines the input parameters for the CloudFormation template.
# These parameters allow you to customize the infrastructure deployment.
Parameters:
  EnvironmentName:
    Description: Environment name for resource tagging (e.g., dev, prod, staging)
    Type: String
    Default: dev

  VpcCIDR:
    Description: CIDR block for the VPC (Virtual Private Cloud)
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR block for public subnet 1 (in first AZ)
    Type: String
    Default: 10.0.1.0/24

  PublicSubnet2CIDR:
    Description: CIDR block for public subnet 2 (in second AZ)
    Type: String
    Default: 10.0.3.0/24

  PrivateSubnet1CIDR:
    Description: CIDR block for private subnet 1 (in first AZ)
    Type: String
    Default: 10.0.2.0/24

  DockerImage:
    Description: Docker image for the box office (soccer stats) application
    Type: String
    Default: 449095351082.dkr.ecr.us-east-1.amazonaws.com/box-office-repo:latest

  ApiKey:
    Description: API Key for the IMDB (soccer stats) database.
    Type: String
    NoEcho: true # This hides the value in the console for security

# --- Resources Section ---
# This section defines the AWS resources that will be created by the template.
Resources:
  # --- VPC Configuration ---
  # Creates a Virtual Private Cloud (VPC) to isolate your resources.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR # Uses the VPC CIDR parameter
      EnableDnsHostnames: true # Enable DNS hostnames for instances in the VPC
      EnableDnsSupport: true # Enable DNS resolution within the VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpc # Tags the VPC with the environment name

  # --- Internet Gateway ---
  # Creates an Internet Gateway to allow resources in the public subnets to access the internet.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-igw # Tags the internet gateway

  # --- VPC Gateway Attachment ---
  # Attaches the Internet Gateway to the VPC.
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC # References the VPC created above
      InternetGatewayId: !Ref InternetGateway # References the Internet Gateway created above

  # --- Subnets ---
  # Creates public and private subnets within the VPC.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR # Uses the PublicSubnet1 CIDR parameter
      AvailabilityZone: !Select [0, !GetAZs ""] # Selects the first availability zone
      MapPublicIpOnLaunch: true # Assign public IPs to instances launched in this subnet
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR # Uses the PublicSubnet2 CIDR parameter
      AvailabilityZone: !Select [1, !GetAZs ""] # Selects the second availability zone
      MapPublicIpOnLaunch: true # Assign public IPs to instances launched in this subnet
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR # Uses the PrivateSubnet1 CIDR parameter
      AvailabilityZone: !Select [0, !GetAZs ""] # Selects the first availability zone
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-private-subnet-1

  # --- Route Tables ---
  # Creates a public route table and a route to the internet gateway.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-public-routes

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway # Ensure the gateway is attached before creating the route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0 # All traffic
      GatewayId: !Ref InternetGateway

  # --- Subnet Route Table Association ---
  # Associates the public subnets with the public route table.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # --- Security Groups ---
  # Creates security groups to control inbound and outbound traffic.
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB (Application Load Balancer)
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Allows HTTP traffic from anywhere
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for soccer stats EC2 instance
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup # Allows traffic from the ALB security group on port 8000
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 # Allows SSH traffic from anywhere
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-sg

  # --- IAM Resources ---
  # Creates IAM resources for the EC2 instance.
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole # Allows EC2 instances to assume this role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore # Allows SSM access
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy # Allows CloudWatch access
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly # Added ECR read-only permissions
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role # Associates the role with the instance profile

  # --- Load Balancer Resources ---
  # Creates an Application Load Balancer (ALB) and related resources.
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing # Makes the ALB accessible from the internet
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health # The path for health checks
      HealthCheckPort: "8000"
      Port: 8000 # The port on the target instance
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance # Targets are instances
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-tg

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup # Forward traffic to the target group
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80 # Listens on port 80
      Protocol: HTTP

  # --- EC2 Instance ---
  # Creates an EC2 instance to host the soccer stats application.
  SoccerStatsInstance:
    Type: AWS::EC2::Instance
    DependsOn: ALBTargetGroup # Ensures the target group exists before creating the instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c7217cdde317cfec # Amazon Linux 2023 AMI
      KeyName: ec2_log # Replace with your key pair name
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData: # User data to configure the instance on launch
        Fn::Base64: !Sub |
          #!/bin/bash -xe         
          apt update -y
          apt install -y docker.io awscli
          systemctl start docker
          systemctl enable docker
          usermod -a -G docker ubuntu   # Changed from ec2-user to ubuntu (for Ubuntu AMIs)
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 449095351082.dkr.ecr.us-east-1.amazonaws.com
          docker pull ${DockerImage}
          docker run -d -p 8000:8000 -e RAPID_API_KEY=${ApiKey} ${DockerImage}
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-soccer-stats

  # --- CloudWatch Resources ---
  # Creates CloudWatch resources for monitoring.
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ec2/${EnvironmentName}-soccer-stats # Log group name
      RetentionInDays: 7 # Logs are retained for 7 days

  CPUUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: CPU utilization is high
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300 # 5 minute periods
      EvaluationPeriods: 2 # Evaluate over 10 minutes
      Threshold: 80 # Threshold at 80% CPU utilization
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref SoccerStatsInstance

# --- Outputs Section ---
# This section defines the values that will be output by the CloudFormation stack.
Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPCID

  PublicSubnet1:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  PrivateSubnet1:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ALBDNS

  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref SoccerStatsInstance
    Export:
      Name: !Sub ${AWS::StackName}-InstanceId

  LogGroupName:
    Description: CloudWatch Log Group Name
    Value: !Ref AppLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-LogGroup
